{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","CardList","robots","cardArray","map","robot","i","key","SearchBox","onChange","searchChange","type","placeholder","Scroll","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filterdRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAeeA,EAbF,SAACC,GAEV,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,YAA8CC,IAAI,WAC1D,6BACI,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCQXC,EAdE,SAACP,GAAW,IACnBQ,EAAWR,EAAXQ,OACAC,EAAYD,EAAOE,KAAI,SAACC,EAAOC,GACjC,OACI,kBAAC,EAAD,CAAMC,IAAKL,EAAOI,GAAGT,GAAIA,GAAIK,EAAOI,GAAGT,GAAIE,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,WAG1F,OACI,6BACIG,ICDGK,EATG,SAACd,GACf,OACG,yBAAKC,UAAU,OACX,2BAAOA,UAAU,mCAAmCc,SAAUf,EAAMgB,aAC/DC,KAAK,SAASC,YAAY,oBCI3BC,EARA,SAACnB,GACd,OACI,yBAAKoB,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAC/DvB,EAAMwB,WCqBFC,G,wDAvBX,WAAYzB,GAAQ,IAAD,8BACf,cAAMA,IACD0B,MAAQ,CACTC,UAAW,GAHA,E,8DAODC,EAAMC,GACpBC,KAAKC,SAAS,CACVJ,UAAW,M,+BAKf,OAAGG,KAAKJ,MAAMC,SAEN,4DAGDG,KAAK9B,MAAMwB,a,GApBEQ,IAAMC,YCwDnBC,E,kDAlDX,aAAe,IAAD,8BACV,gBAkBJC,eAAiB,SAACC,GAEd,EAAKL,SAAS,CACVM,YAAaD,EAAME,OAAOC,SAnB9B,EAAKb,MAAQ,CACTlB,OAAQ,GACR6B,YAAa,IALP,E,gEASO,IAAD,OAChBG,MAAM,8CAA8CC,MAAK,SAACC,GACtD,OAAOA,EAASC,UACjBF,MAAK,SAACG,GACL,EAAKb,SAAS,CACVvB,OAAQoC,S,+BAYV,IAAD,OAECC,EAAgBf,KAAKJ,MAAMlB,OAAOsC,QAAO,SAACnC,GAC5C,OAAOA,EAAMN,KAAK0C,cAAcC,SAAS,EAAKtB,MAAMW,YAAYU,kBAEpE,OAAiC,IAA7BjB,KAAKJ,MAAMlB,OAAOyC,OACV,yCAIJ,yBAAKhD,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWe,aAAcc,KAAKK,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU3B,OAAQqC,W,GA1C5BZ,aCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.6d1f8a08.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    //var { id , name , email } = props //destructuring new ES6 syntax\n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${props.id}?200x200`} alt='robots'></img>\n            <div>\n                <h2>{props.name}</h2>\n                <p>{props.email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = (props) => {\n    var { robots } = props;\n    const cardArray = robots.map((robot, i) => {\n        return (\n            <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\n        );\n    })\n    return (\n        <div>\n           {cardArray}\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = (props) => {\n    return(\n       <div className='pa2'>\n           <input className='pa3 ba b--green bg-lightest-blue' onChange={props.searchChange}\n                type='search' placeholder='serach robots'></input>\n       </div>     \n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return(\n      <div style={{overflow: 'scroll', border: '1px solid black', height: '800px'}}>\n          {props.children}\n      </div>\n  );\n};\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundary extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError : false\n        }\n    }\n\n    componentDidCatch(error,info) {\n        this.setState({\n            hasError : true\n        });\n    }\n\n    render() {\n        if(this.state.hasError){\n            return(\n                <h1>Ooops! Something went wrong.</h1>\n            );\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nclass App extends Component {\n    constructor() {\n        super();\n        //create the state for root app\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users').then((response) => {\n            return response.json();\n        }).then((users) => {\n            this.setState({\n                robots: users\n            });\n        });\n    }\n\n    onSearchChange = (event) => {\n        //this triggers the render of the component\n        this.setState({\n            searchfield: event.target.value\n        });\n    }\n\n    render() {\n        //once the render is trigger filter the robots based on what is there in searchfield\n        const filterdRobots = this.state.robots.filter((robot) => {\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        });\n        if (this.state.robots.length === 0) {\n            return (<h1>Loading..</h1>)\n        }\n        else {\n            return (\n                <div className='tc'>\n                    <h1 className='f1'>Robofriends</h1>\n                    <SearchBox searchChange={this.onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={filterdRobots} />\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            );\n        }\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}